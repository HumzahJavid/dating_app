name: CI-CD workflow
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: pytest via tox
        run: |
          poetry run tox -e test

  lint:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: Lint
        run: |
          poetry run isort --check dating_app  # import sorting
          poetry run black --check --diff dating_app  # style checking
          poetry run flake8 dating_app  # basic linting
          poetry run pylint --errors-only dating_app  # advanced linting
          poetry run mypy dating_app  # static type checking for type hints

  lint_report:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: lint report
        run: |
          mkdir -p build/reports
          poetry run pylint -ry --exit-zero dating_app | tee build/reports/pylint_score.txt
      - name: lint coverage tox
        run: |
          poetry run tox -e coverage-reports, coverage-linting

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: pylint-score-report
          path: build/reports/pylint_score.txt
          retention-days: 5

      - name: Upload build reports
        uses: actions/upload-artifact@v3
        with:
          name: report-directory
          path: build/reports/
          retention-days: 5

          # This method only works within the same job
          # - name: Set the value
          #   id: step_one
          #   run: |
          #     echo "pylint_score=5/10" >> $GITHUB_ENV

          # - name: Use the value
          #   id: step_two
          #   run: |
          #     echo "${{ env.pylint_score }}" # This will output '5/10'

          # alternative approach use outputs https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action/61236803#61236803
          # https://stackoverflow.com/questions/70326569/github-workflow-how-to-conditionally-setup-env-for-all-subsequent-jobs
          # Map a step output to a job output
          # outputs:
          #   output1: ${{ steps.step1.outputs.test }}

  update_badges:
    runs-on: ubuntu-latest
    needs: [lint_report]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: Download pylint_score.txt
        uses: actions/download-artifact@v3
        with:
          name: pylint-score-report
      - name: step2 (different job)
        shell: bash
        run: |
          echo "${{ env.pylint_score }}" # should print 5/10

      - name: print-pylint-score-report-direct
        shell: bash
        run: |
          cat pylint_score.txt

      - name: extract-pylint-score-report
        run: |
          pylint_score_bash=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint_score.txt)
          echo "pylint_score=$pylint_score_bash">> $GITHUB_ENV
      - name: verify-pylint-score-variables
        run: |
          echo "temp bash variable $pylint_score_bash"
          echo "github env variable ${{ env.pylint_score }}"

      - name: create-badges
        run: |
          cd badges
          poetry run python create_readme_badges.py ${{ env.pylint_score }}
