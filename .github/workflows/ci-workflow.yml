name: CI-CD workflow
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: pytest via tox
        run: |
          poetry run tox -e test

  lint:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: Lint
        run: |
          poetry run isort --check dating_app  # import sorting
          poetry run black --check --diff dating_app  # style checking
          poetry run flake8 dating_app  # basic linting
          poetry run pylint --errors-only dating_app  # advanced linting
          poetry run mypy dating_app  # static type checking for type hints

  lint_report:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------
      - name: lint report
        run: |
          mkdir -p build/reports
          poetry run pylint -ry --exit-zero dating_app | tee build/reports/pylint_score.txt
      - name: lint coverage tox
        run: |
          poetry run tox -e coverage-reports, coverage-linting

      # - name: Archive code coverage results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: pylint-score-report
      #     path: build/reports/pylint_score.txt
      #     retention-days: 5

      - name: Build stub artifact
        run: |
          echo "stub" > stub_artifact.txt

      # https://github.com/actions/upload-artifact/issues/174#issuecomment-934330651
      - name: Upload build reports
        uses: actions/upload-artifact@v3
        with:
          name: report-directory
          path: |
            ./stub_artifact.txt
            ./build/reports/
          retention-days: 5

  update_badges:
    runs-on: ubuntu-latest
    needs: [lint_report]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #  -----         Setup poetry          -----
      #----------------------------------------------
      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
      #----------------------------------------------
      #  -----  The command to run   -----
      #----------------------------------------------

      - name: Download artifact directory
        uses: actions/download-artifact@v3
        with:
          name: report-directory

      # - name: extract-pylint-score-report
      #   run: |
      #     pylint_score_bash=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint_score.txt)
      #     echo "pylint_score=$pylint_score_bash">> $GITHUB_ENV
      # - name: verify-pylint-score-variables
      #   run: |
      #     echo "temp bash variable $pylint_score_bash"
      #     echo "github env variable ${{ env.pylint_score }}"

      # - name: create-badges
      #   run: |
      #     cd badges
      #     poetry run python create_readme_badges.py ${{ env.pylint_score }}

      # create badge via file
      - name: create-badges-via-fie
        run: |
          cd badges
          poetry run python create_readme_badges.py

      - name: check-badge-exists
        run: |
          pwd
          ls ./build/badges/
          cat ./build/badges/rating.svg

      # Push badge to another repo
      - name: Pushes badge file
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: "./build/badges/"
          destination_repo: "HumzahJavid/humzahjavid"
          destination_branch: "temp"
          user_email: "HumzahJavid@users.noreply.github.com"
          user_name: "HumzahJavid"
